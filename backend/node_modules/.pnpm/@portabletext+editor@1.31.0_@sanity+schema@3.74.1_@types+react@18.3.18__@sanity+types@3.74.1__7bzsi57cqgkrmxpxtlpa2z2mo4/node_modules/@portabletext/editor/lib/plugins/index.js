import { c } from "react-compiler-runtime";
import React, { useEffect } from "react";
import { useEditor } from "../_chunks-es/plugin.event-listener.js";
import { EventListenerPlugin } from "../_chunks-es/plugin.event-listener.js";
import { createMarkdownBehaviors } from "../_chunks-es/behavior.markdown.js";
import { jsx } from "react/jsx-runtime";
import { isSelectionExpanded, getFocusTextBlock, getSelectionStartPoint, getSelectionEndPoint } from "../_chunks-es/selector.is-at-the-start-of-block.js";
import { getBlockStartPoint, getBlockEndPoint, isEqualSelectionPoints } from "../_chunks-es/util.reverse-selection.js";
import { isTextBlock, splitTextBlock, mergeTextBlocks } from "../utils/index.js";
import { defineBehavior, raise } from "../_chunks-es/behavior.core.js";
function BehaviorPlugin(props) {
  const $ = c(4), editor = useEditor();
  let t0, t1;
  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {
    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({
      behavior
    }));
    return () => {
      unregisterBehaviors.forEach(_temp);
    };
  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), useEffect(t0, t1), null;
}
function _temp(unregister) {
  return unregister();
}
const EditorRefPlugin = React.forwardRef((_, ref) => {
  const $ = c(2), editor = useEditor(), portableTextEditorRef = React.useRef(editor);
  let t0, t1;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), React.useImperativeHandle(ref, t0, t1), null;
});
EditorRefPlugin.displayName = "EditorRefPlugin";
function MarkdownPlugin(props) {
  const editor = useEditor();
  return useEffect(() => {
    const unregisterBehaviors = createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({
      behavior
    }));
    return () => {
      for (const unregisterBehavior of unregisterBehaviors)
        unregisterBehavior();
    };
  }, [editor, props.config]), null;
}
const oneLineBehaviors = [
  /**
   * Hitting Enter on an expanded selection should just delete that selection
   * without causing a line break.
   */
  defineBehavior({
    on: "insert.break",
    guard: ({
      context
    }) => context.selection && isSelectionExpanded({
      context
    }) ? {
      selection: context.selection
    } : !1,
    actions: [(_, {
      selection
    }) => [{
      type: "delete",
      selection
    }]]
  }),
  /**
   * All other cases of `insert.break` should be aborted.
   */
  defineBehavior({
    on: "insert.break",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * `insert.block` `before` or `after` is not allowed in a one-line editor.
   */
  defineBehavior({
    on: "insert.block",
    guard: ({
      event
    }) => event.placement === "before" || event.placement === "after",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * Other cases of `insert.block` are allowed.
   *
   * If a text block is inserted and the focus block is fully selected, then
   * the focus block can be replaced with the inserted block.
   */
  defineBehavior({
    on: "insert.block",
    guard: ({
      context,
      event
    }) => {
      const focusTextBlock = getFocusTextBlock({
        context
      }), selectionStartPoint = getSelectionStartPoint({
        context
      }), selectionEndPoint = getSelectionEndPoint({
        context
      });
      if (!focusTextBlock || !isTextBlock(context, event.block) || !selectionStartPoint || !selectionEndPoint)
        return !1;
      const blockStartPoint = getBlockStartPoint(focusTextBlock), blockEndPoint = getBlockEndPoint(focusTextBlock), newFocus = getBlockEndPoint({
        node: event.block,
        path: [{
          _key: event.block._key
        }]
      });
      return isEqualSelectionPoints(blockStartPoint, selectionStartPoint) && isEqualSelectionPoints(blockEndPoint, selectionEndPoint) ? {
        focusTextBlock,
        newFocus
      } : !1;
    },
    actions: [({
      event
    }, {
      focusTextBlock,
      newFocus
    }) => [{
      type: "delete.block",
      blockPath: focusTextBlock.path
    }, {
      type: "insert.block",
      block: event.block,
      placement: "auto"
    }, {
      type: "select",
      selection: {
        anchor: newFocus,
        focus: newFocus
      }
    }]]
  }),
  /**
   * An ordinary `insert.block` is acceptable if it's a text block. In that
   * case it will get merged into the existing text block.
   */
  defineBehavior({
    on: "insert.block",
    guard: ({
      context,
      event
    }) => {
      const focusTextBlock = getFocusTextBlock({
        context
      }), selectionStartPoint = getSelectionStartPoint({
        context
      }), selectionEndPoint = getSelectionEndPoint({
        context
      });
      if (!focusTextBlock || !isTextBlock(context, event.block) || !selectionStartPoint || !selectionEndPoint)
        return !1;
      const blockBeforeStartPoint = splitTextBlock({
        context,
        block: focusTextBlock.node,
        point: selectionStartPoint
      })?.before, blockAfterEndPoint = splitTextBlock({
        context,
        block: focusTextBlock.node,
        point: selectionEndPoint
      })?.after;
      if (!blockBeforeStartPoint || !blockAfterEndPoint)
        return !1;
      const targetBlock = mergeTextBlocks({
        context,
        targetBlock: blockBeforeStartPoint,
        incomingBlock: event.block
      }), newFocus = getBlockEndPoint({
        node: targetBlock,
        path: [{
          _key: targetBlock._key
        }]
      }), mergedBlock = mergeTextBlocks({
        context,
        targetBlock,
        incomingBlock: blockAfterEndPoint
      });
      return {
        focusTextBlock,
        mergedBlock,
        newFocus
      };
    },
    actions: [(_, {
      focusTextBlock,
      mergedBlock,
      newFocus
    }) => [{
      type: "delete.block",
      blockPath: focusTextBlock.path
    }, {
      type: "insert.block",
      block: mergedBlock,
      placement: "auto"
    }, {
      type: "select",
      selection: {
        anchor: newFocus,
        focus: newFocus
      }
    }]]
  }),
  /**
   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all
   * end up with a falsy guard.
   */
  defineBehavior({
    on: "insert.block",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * If multiple blocks are inserted, then the non-text blocks are filtered out
   * and the text blocks are merged into one block
   */
  defineBehavior({
    on: "insert.blocks",
    guard: ({
      context,
      event
    }) => event.blocks.filter((block) => isTextBlock(context, block)).reduce((targetBlock, incomingBlock) => mergeTextBlocks({
      context,
      targetBlock,
      incomingBlock
    })),
    actions: [
      // `insert.block` is raised so the Behavior above can handle the
      // insertion
      (_, block) => [raise({
        type: "insert.block",
        block,
        placement: "auto"
      })]
    ]
  }),
  /**
   * Block objects do not fit in a one-line editor
   */
  defineBehavior({
    on: "insert.block object",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * `insert.text block` is raised as an `insert.block` so it can be handled
   * by the Behaviors above.
   */
  defineBehavior({
    on: "insert.text block",
    actions: [({
      context,
      event
    }) => [raise({
      type: "insert.block",
      block: {
        _key: context.keyGenerator(),
        _type: context.schema.block.name,
        children: event.textBlock?.children ?? []
      },
      placement: event.placement
    })]]
  })
];
function OneLinePlugin() {
  const $ = c(1);
  let t0;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ jsx(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;
}
export {
  BehaviorPlugin,
  EditorRefPlugin,
  EventListenerPlugin,
  MarkdownPlugin,
  OneLinePlugin
};
//# sourceMappingURL=index.js.map
