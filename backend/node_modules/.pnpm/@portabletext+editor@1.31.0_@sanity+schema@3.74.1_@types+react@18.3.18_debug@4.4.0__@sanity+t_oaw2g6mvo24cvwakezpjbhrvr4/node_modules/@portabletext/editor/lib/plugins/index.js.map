{"version":3,"file":"index.js","sources":["../../src/plugins/plugin.behavior.tsx","../../src/plugins/plugin.editor-ref.tsx","../../src/plugins/plugin.markdown.tsx","../../src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","import React from 'react'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return null\n}\n","import {defineBehavior, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({context}) =>\n      context.selection && selectors.isSelectionExpanded({context})\n        ? {selection: context.selection}\n        : false,\n    actions: [(_, {selection}) => [{type: 'delete', selection}]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * Other cases of `insert.block` are allowed.\n   *\n   * If a text block is inserted and the focus block is fully selected, then\n   * the focus block can be replaced with the inserted block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({context, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const selectionStartPoint = selectors.getSelectionStartPoint({context})\n      const selectionEndPoint = selectors.getSelectionEndPoint({context})\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockStartPoint = utils.getBlockStartPoint(focusTextBlock)\n      const blockEndPoint = utils.getBlockEndPoint(focusTextBlock)\n      const newFocus = utils.getBlockEndPoint({\n        node: event.block,\n        path: [{_key: event.block._key}],\n      })\n\n      if (\n        utils.isEqualSelectionPoints(blockStartPoint, selectionStartPoint) &&\n        utils.isEqualSelectionPoints(blockEndPoint, selectionEndPoint)\n      ) {\n        return {focusTextBlock, newFocus}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {focusTextBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: event.block, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({context, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock({context})\n      const selectionStartPoint = selectors.getSelectionStartPoint({context})\n      const selectionEndPoint = selectors.getSelectionEndPoint({context})\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(context, event.block) ||\n        !selectionStartPoint ||\n        !selectionEndPoint\n      ) {\n        return false\n      }\n\n      const blockBeforeStartPoint = utils.splitTextBlock({\n        context,\n        block: focusTextBlock.node,\n        point: selectionStartPoint,\n      })?.before\n      const blockAfterEndPoint = utils.splitTextBlock({\n        context,\n        block: focusTextBlock.node,\n        point: selectionEndPoint,\n      })?.after\n\n      if (!blockBeforeStartPoint || !blockAfterEndPoint) {\n        return false\n      }\n\n      const targetBlock = utils.mergeTextBlocks({\n        context,\n        targetBlock: blockBeforeStartPoint,\n        incomingBlock: event.block,\n      })\n\n      const newFocus = utils.getBlockEndPoint({\n        node: targetBlock,\n        path: [{_key: targetBlock._key}],\n      })\n\n      const mergedBlock = utils.mergeTextBlocks({\n        context,\n        targetBlock,\n        incomingBlock: blockAfterEndPoint,\n      })\n\n      return {focusTextBlock, mergedBlock, newFocus}\n    },\n    actions: [\n      (_, {focusTextBlock, mergedBlock, newFocus}) => [\n        {type: 'delete.block', blockPath: focusTextBlock.path},\n        {type: 'insert.block', block: mergedBlock, placement: 'auto'},\n        {\n          type: 'select',\n          selection: {\n            anchor: newFocus,\n            focus: newFocus,\n          },\n        },\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({context, event}) => {\n      return event.blocks\n        .filter((block) => utils.isTextBlock(context, block))\n        .reduce((targetBlock, incomingBlock) => {\n          return utils.mergeTextBlocks({\n            context,\n            targetBlock,\n            incomingBlock,\n          })\n        })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Block objects do not fit in a one-line editor\n   */\n  defineBehavior({\n    on: 'insert.block object',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.text block` is raised as an `insert.block` so it can be handled\n   * by the Behaviors above.\n   */\n  defineBehavior({\n    on: 'insert.text block',\n    actions: [\n      ({context, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _key: context.keyGenerator(),\n            _type: context.schema.block.name,\n            children: event.textBlock?.children ?? [],\n          },\n          placement: event.placement,\n        }),\n      ],\n    ],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","EditorRefPlugin","React","forwardRef","_","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","MarkdownPlugin","createMarkdownBehaviors","config","unregisterBehavior","oneLineBehaviors","defineBehavior","on","guard","context","selection","selectors","actions","type","event","placement","focusTextBlock","selectionStartPoint","selectionEndPoint","utils","block","blockStartPoint","blockEndPoint","newFocus","node","path","_key","blockPath","anchor","focus","blockBeforeStartPoint","point","before","blockAfterEndPoint","after","targetBlock","incomingBlock","mergedBlock","blocks","filter","reduce","raise","keyGenerator","_type","schema","name","children","textBlock","OneLinePlugin"],"mappings":"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"}